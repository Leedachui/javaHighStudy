<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"

       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--spring的配置文件,声明service,dao,工具类-->


    <!--将数据库的配置信息，写在一个独立文件，方便修改数据库的配置信息
            让spring知道配置文件的位置-->
    <context:property-placeholder location="classpath:conf/jdbc.properties"/>
    <!--声明数据源，连接数据库-->
    <bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!--使用set注入给DruidDataSource提供数据库连接信息-->
        <!--
            使用配置文件中的数据，语法：${key}
            -->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="maxActive" value="${jdbc.maxActive}"/>
    </bean>

    <!--声明myBatis中提供SqlSessionFactoryBean类，这个类的内部是创建sqlSessionFactory对象的-->
    <bean id="SqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--set注入，把数据库的连接池，赋值给dataSource属性-->
        <property name="dataSource" ref="myDataSource"/>
        <!--mybatis的主配置文件
        在spring配置文件中指定其他文件的路径，在前面加classpath：-->
        <property name="configLocation" value="classpath:conf/mybatis_config.xml"/>
    </bean>

    <!--自动代理生成器，创建代理-->
    <aop:aspectj-autoproxy/>

    <!--创建dao对象，使用SqlSession的getMapper(StudentDao.class)
        MapperScannerConfigurer：在内部调用getMapper()生成每个dao的代理对象-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定sqlSessionFactory对象的id-->
        <property name="sqlSessionFactoryBeanName" value="SqlSessionFactory"/>
        <!--指定包名，是dao接口所在的包名
            MapperScannerConfigurer会扫描这个包中的所有接口，每个接口都执行getMapper()方法，
            得到每个dao的对象，然后把创建好的dao对象放在spring容器中
            多个包，value的值用“,”分隔-->
        <property name="basePackage" value="com.study.dao"/>
    </bean>

    <!--声明service-->

    <!--使用spring的事务处理-->
    <!--1.声明事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--指定数据源-->
        <property name="dataSource" ref="myDataSource"/>
    </bean>
    <!--2.开启事务注解驱动，告诉spring使用注解管理事务，创建代理对象
        transaction-manager:事务管理器对象的id-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!--组件扫描器-->
    <context:component-scan base-package="com.study"/>

</beans>